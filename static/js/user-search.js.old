class UserSearchModal {
    constructor(modalId, options = {}) {
        this.modalId = modalId;
        this.options = {
            searchEndpoint: '/search-users',
            onUserSelected: null,
            ...options
        };
        
        this.modal = document.getElementById(modalId);
        this.searchInput = document.getElementById(`${modalId}_searchUserName`);
        this.searchBtn = document.getElementById(`${modalId}_searchUserBtn`);
        this.resultsList = document.getElementById(`${modalId}_searchResultsList`);
        this.noResultsMessage = document.getElementById(`${modalId}_noResultsMessage`);
        this.selectBtn = document.getElementById(`${modalId}_selectUserBtn`);
        this.closeBtn = this.modal.querySelector('.close-button');
        
        this.selectedUserNo = null;
        this.selectedUserName = null;
        
        this.init();
    }
    
    init() {
        // イベントリスナーの設定
        this.closeBtn.onclick = () => this.close();
        this.searchBtn.onclick = () => this.searchUsers();
        this.selectBtn.onclick = () => this.selectUser();
        
        // Enterキーで検索
        this.searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.searchUsers();
            }
        });
        
        // モーダル外クリックで閉じる
        window.addEventListener('click', (event) => {
            if (event.target === this.modal) {
                this.close();
            }
        });
    }
    
    open() {
        this.modal.style.display = 'flex';
        this.reset();
        this.searchInput.focus();
    }
    
    close() {
        this.modal.style.display = 'none';
    }
    
    reset() {
        this.searchInput.value = '';
        this.resultsList.innerHTML = '';
        this.noResultsMessage.style.display = 'none';
        this.selectBtn.disabled = true;
        this.selectedUserNo = null;
        this.selectedUserName = null;
    }
    
    async searchUsers() {
        const nameQuery = this.searchInput.value;
        this.resultsList.innerHTML = '';
        this.noResultsMessage.style.display = 'none';
        this.selectBtn.disabled = true;
        this.selectedUserNo = null;
        this.selectedUserName = null;
        
        try {
            const response = await fetch(`${this.options.searchEndpoint}?name=${encodeURIComponent(nameQuery)}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            
            const users = await response.json();
            
            if (users.length === 0) {
                this.noResultsMessage.style.display = 'block';
            } else {
                users.forEach(user => {
                    const li = document.createElement('li');
                    li.textContent = `${user.username} (No: ${user.userno})`;
                    li.dataset.userno = user.userno;
                    li.dataset.username = user.username;
                    
                    li.onclick = () => {
                        // 選択状態をリセット
                        this.resultsList.querySelectorAll('li').forEach(item => {
                            item.classList.remove('selected');
                        });
                        
                        // 新しい選択
                        li.classList.add('selected');
                        this.selectedUserNo = user.userno;
                        this.selectedUserName = user.username;
                        this.selectBtn.disabled = false;
                    };
                    
                    this.resultsList.appendChild(li);
                });
            }
        } catch (error) {
            console.error('Error searching users:', error);
            alert('ユーザー検索に失敗しました。');
        }
    }
    
    selectUser() {
        if (!this.selectedUserNo) {
            alert('ユーザーを選択してください。');
            return;
        }
        
        if (this.options.onUserSelected) {
            this.options.onUserSelected(this.selectedUserNo, this.selectedUserName);
        }
        
        this.close();
    }
}
